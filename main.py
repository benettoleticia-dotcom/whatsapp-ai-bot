from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

import os
import hashlib
import hmac
import random
import re
import json
from datetime import datetime, timedelta
import asyncio
from telegram_client import send_telegram_message, start_telegram_client, stop_telegram_client, listen_for_messages

import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

app = FastAPI()

# ADICIONAR AO MAIN.PY EXISTENTE

# CONFIGURA√á√ÉO DO SISTEMA DE ENTREGA
class AutoDeliverySystem:
    def __init__(self):
        # STRIPE WEBHOOK SECRET (para validar pagamentos reais)
        self.stripe_webhook_secret = os.getenv("STRIPE_WEBHOOK_SECRET", "whsec_sua_chave_aqui")
        
        # CONTE√öDOS ORGANIZADOS POR PACOTE
        self.content_packages = {
            19.90: {
                "name": "Pacote B√°sico",
                "photos": [
                    "https://drive.google.com/file/d/1abc.../view?usp=sharing",
                    "https://drive.google.com/file/d/2def.../view?usp=sharing",
                    # ... 18 links mais (total 20)
                ],
                "videos": [
                    "https://drive.google.com/file/d/3ghi.../view?usp=sharing",
                    "https://drive.google.com/file/d/4jkl.../view?usp=sharing", 
                    # ... 18 links mais (total 20)
                ],
                "welcome_message": "Bem-vindo ao meu conte√∫do b√°sico amor! üòò Aqui est√£o suas 20 fotos + 20 v√≠deos exclusivos:",
                "access_duration": 365  # dias de acesso
            },
            29.90: {
                "name": "Pacote Intermedi√°rio", 
                "photos": [
                    # 40 links de fotos
                ],
                "videos": [
                    # 40 links de v√≠deos
                ],
                "welcome_message": "Parab√©ns pela escolha inteligente! üî• Aqui est√° seu pacote com 40 fotos + 40 v√≠deos:",
                "access_duration": 365,
                "bonus": "https://t.me/+LinkDoGrupoPrivado"  # Grupo Telegram premium
            },
            39.90: {
                "name": "Pacote Premium",
                "photos": [
                    # 80 links de fotos  
                ],
                "videos": [
                    # 80 links de v√≠deos
                ],
                "welcome_message": "Welcome to premium! üëë Seu acesso completo com 80 fotos + 80 v√≠deos + chat exclusivo:",
                "chat_access": "https://wa.me/5542999999999?text=SouClientePremium",
                "video_call_booking": "https://calendly.com/ana-videocalls",
                "access_duration": 365
            },
            59.90: {
                "name": "Pacote VIP",
                "photos": "https://drive.google.com/drive/folders/PASTA_COMPLETA",
                "videos": "https://drive.google.com/drive/folders/PASTA_VIDEOS_VIP", 
                "welcome_message": "üöÄ CLIENTE VIP ATIVADO! Acesso ILIMITADO a todo meu conte√∫do:",
                "vip_telegram": "https://t.me/+GrupoVIPExclusivo",
                "priority_whatsapp": "https://wa.me/5542999999999?text=ClienteVIP",
                "discount_code": "VIP20OFF",  # 20% desconto em encontros
                "access_duration": -1  # Acesso vital√≠cio
            }
        }
        
        # MENSAGENS DE ENTREGA AUTOM√ÅTICA
        self.delivery_messages = {
            "payment_confirmed": [
                "üéâ PAGAMENTO CONFIRMADO! Obrigada pela confian√ßa amor!",
                "‚úÖ Pagamento processado com sucesso! Preparando seu acesso...",
                "üíï Confirmado! Agora √©s oficialmente meu cliente querido!"
            ],
            "content_delivery": [
                "üì± Enviando seu conte√∫do agora...",
                "üî• Preparei tudo especialmente para ti!",
                "üí´ Aqui est√° o que estavas esperando:"
            ],
            "access_instructions": [
                "üìã IMPORTANTE: Salva todos os links em local seguro!",
                "‚ö†Ô∏è Links s√£o pessoais e intransfer√≠veis",
                "üí¨ Qualquer problema, me chama no privado!"
            ]
        }
        
        logger.info("‚úÖ Sistema de entrega autom√°tica inicializado")
    
    def verify_stripe_signature(self, payload, signature):
        """Verifica se webhook √© realmente do Stripe"""
        try:
            expected_signature = hmac.new(
                self.stripe_webhook_secret.encode('utf-8'),
                payload,
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(f"sha256={expected_signature}", signature)
        except Exception as e:
            logger.error(f"‚ùå Erro verifica√ß√£o Stripe: {e}")
            return False
    
    def detect_payment_amount(self, stripe_data):
        """Extrai valor do pagamento do webhook Stripe"""
        try:
            # Stripe envia valor em centavos
            amount_cents = stripe_data.get('data', {}).get('object', {}).get('amount', 0)
            amount_euros = amount_cents / 100
            
            # Mapeia para nossos pacotes
            package_mapping = {
                1990: 19.90,  # ‚Ç¨19,90 = 1990 centavos
                2990: 29.90,  # ‚Ç¨29,90 = 2990 centavos
                3990: 39.90,  # ‚Ç¨39,90 = 3990 centavos
                5990: 59.90   # ‚Ç¨59,90 = 5990 centavos
            }
            
            return package_mapping.get(amount_cents, None)
        except Exception as e:
            logger.error(f"‚ùå Erro extraindo valor: {e}")
            return None
    
    def get_customer_phone(self, stripe_data):
        """Extrai telefone do cliente do webhook"""
        try:
            # Stripe pode ter o telefone em metadata ou customer
            customer_data = stripe_data.get('data', {}).get('object', {})
            
            # Procura em v√°rios locais poss√≠veis
            phone = (
                customer_data.get('metadata', {}).get('phone') or
                customer_data.get('customer_details', {}).get('phone') or
                customer_data.get('billing_details', {}).get('phone')
            )
            
            if phone:
                # Limpa e formata telefone
                clean_phone = re.sub(r'[^\d+]', '', phone)
                return clean_phone
            
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro extraindo telefone: {e}")
            return None
    
    async def deliver_content_package(self, phone, package_price):
        """Entrega conte√∫do automaticamente ap√≥s confirma√ß√£o"""
        try:
            package = self.content_packages.get(package_price)
            if not package:
                logger.error(f"‚ùå Pacote n√£o encontrado: ‚Ç¨{package_price}")
                return False
            
            logger.info(f"üöÄ Iniciando entrega autom√°tica: ‚Ç¨{package_price} para {phone[-8:]}")
            
            # 1. CONFIRMA PAGAMENTO
            confirmation_msg = random.choice(self.delivery_messages["payment_confirmed"])
            await send_telegram_message(1076029751, confirmation_msg)
            await asyncio.sleep(3)
            
            # 2. MENSAGEM DE PREPARA√á√ÉO
            preparation_msg = random.choice(self.delivery_messages["content_delivery"])
            await send_telegram_message(1076029751, preparation_msg)
            await asyncio.sleep(5)
            
            # 3. MENSAGEM DE BOAS-VINDAS
            welcome_msg = package["welcome_message"]
            await send_telegram_message(1076029751, welcome_msg)
            await asyncio.sleep(3)
            
            # 4. ENTREGA DO CONTE√öDO (baseado no pacote)
            if package_price == 59.90:
                # VIP: Pasta completa + acessos especiais
                await self.deliver_vip_content(phone, package)
            else:
                # Outros: Links individuais em lotes
                await self.deliver_standard_content(phone, package)
            
            # 5. INSTRU√á√ïES FINAIS
            instructions = random.choice(self.delivery_messages["access_instructions"])
            await send_telegram_message(1076029751, instructions)
            
            # 6. ATUALIZA STATUS DO CLIENTE

            
            logger.info(f"‚úÖ Conte√∫do entregue com sucesso para {phone[-8:]}")
            return True
            
        except Exception as e:
            logger.error(f"üí• Erro na entrega: {e}")
            return False
    
    async def deliver_standard_content(self, phone, package):
        """Entrega conte√∫do padr√£o (fotos + v√≠deos em lotes)"""
        try:
            # FOTOS (envia em lotes de 5)
            if 'photos' in package and isinstance(package['photos'], list):
                await send_telegram_message(1076029751, "üì∏ SUAS FOTOS EXCLUSIVAS:")
                await asyncio.sleep(2)
                
                photos = package['photos']
                for i in range(0, len(photos), 5):  # Lotes de 5
                    batch = photos[i:i+5]
                    batch_text = f"Fotos {i+1}-{i+len(batch)}:\n" + "\n".join(batch)
                    await send_telegram_message(1076029751, batch_text)
                    await asyncio.sleep(8)  # 8 segundos entre lotes
            
            # V√çDEOS (envia em lotes de 3)
            if 'videos' in package and isinstance(package['videos'], list):
                await send_telegram_message(1076029751, "üé• SEUS V√çDEOS QUENTES:")
                await asyncio.sleep(2)
                
                videos = package['videos']
                for i in range(0, len(videos), 3):  # Lotes de 3
                    batch = videos[i:i+3]
                    batch_text = f"V√≠deos {i+1}-{i+len(batch)}:\n" + "\n".join(batch)
                    await send_telegram_message(1076029751, batch_text)
                    await asyncio.sleep(10)  # 10 segundos entre lotes
            
            # B√îNUS (se houver)
            if 'bonus' in package:
                await asyncio.sleep(5)
                await send_telegram_message(1076029751, "üéÅ B√îNUS ESPECIAL:")
                await send_telegram_message(1076029751, package['bonus'])
            
        except Exception as e:
            logger.error(f"‚ùå Erro entrega padr√£o: {e}")
    
    async def deliver_vip_content(self, phone, package):
        """Entrega conte√∫do VIP (acesso completo + privil√©gios)"""
        try:
            # ACESSO COMPLETO √ÄS PASTAS
            await send_telegram_message(1076029751, "üìÇ ACESSO COMPLETO √ÄS MINHAS PASTAS:")
            await asyncio.sleep(2)
            
            await send_telegram_message(1076029751, f"üì∏ Todas as fotos: {package['photos']}")
            await asyncio.sleep(3)
            
            await send_telegram_message(1076029751, f"üé• Todos os v√≠deos: {package['videos']}")
            await asyncio.sleep(3)
            
            # ACESSOS VIP
            await send_telegram_message(1076029751, "üëë PRIVIL√âGIOS VIP ATIVADOS:")
            await asyncio.sleep(2)
            
            await send_telegram_message(1076029751, f"üí¨ Grupo VIP: {package['vip_telegram']}")
            await asyncio.sleep(3)
            
            await send_telegram_message(1076029751, f"üìû WhatsApp Priority: {package['priority_whatsapp']}")
            await asyncio.sleep(3)
            
            # C√ìDIGO DE DESCONTO
            await send_telegram_message(1076029751, f"üé´ Seu c√≥digo de desconto: {package['discount_code']}")
            await send_telegram_message(1076029751, "20% OFF em todos os encontros presenciais! üî•")
            
        except Exception as e:
            logger.error(f"‚ùå Erro entrega VIP: {e}")
    
    async def schedule_followup(self, phone, package_price):
        """Agenda follow-up autom√°tico p√≥s-entrega"""
        try:
            # Follow-up ap√≥s 24h
            followup_messages = [
                "Oi amor! Conseguiste aceder a todo o conte√∫do? Alguma d√∫vida? üòò",
                "Hey querido! Como est√° a curtir o material? Tudo funcionando bem? üíï",
                "Ol√°! S√≥ para saber se est√° tudo ok com teu acesso! Beijos! üòâ"
            ]
            
            # Implementar sistema de agendamento (pode usar APScheduler ou similar)
            # Por agora, apenas loga a inten√ß√£o
            logger.info(f"üìÖ Follow-up agendado para {phone[-8:]} em 24h")
            
        except Exception as e:
            logger.error(f"‚ùå Erro agendando follow-up: {e}")

# INST√ÇNCIA GLOBAL
delivery_system = AutoDeliverySystem()

# WEBHOOK STRIPE PARA CONFIRMA√á√ÉO DE PAGAMENTO
@app.post("/stripe-webhook")
async def stripe_webhook(request: Request):
    """Webhook do Stripe para confirma√ß√£o autom√°tica de pagamento"""
    try:
        # Recebe payload do Stripe
        payload = await request.body()
        signature = request.headers.get("stripe-signature")
        
        if not signature:
            logger.error("‚ùå Webhook sem assinatura")
            return {"error": "No signature"}
        
        # Verifica se √© realmente do Stripe
        if not delivery_system.verify_stripe_signature(payload, signature):
            logger.error("‚ùå Assinatura Stripe inv√°lida")
            return {"error": "Invalid signature"}
        
        # Parse do JSON
        event_data = json.loads(payload)
        event_type = event_data.get("type")
        
        logger.info(f"üîî Webhook Stripe recebido: {event_type}")
        
        # Processa apenas pagamentos confirmados
        if event_type in ["payment_intent.succeeded", "checkout.session.completed"]:
            
            # Extrai informa√ß√µes do pagamento
            package_price = delivery_system.detect_payment_amount(event_data)
            customer_phone = delivery_system.get_customer_phone(event_data)
            
            if package_price and customer_phone:
                logger.info(f"üí∞ PAGAMENTO CONFIRMADO: ‚Ç¨{package_price} de {customer_phone[-8:]}")
                
                # ENTREGA AUTOM√ÅTICA IMEDIATA
                asyncio.create_task(
                    delivery_system.deliver_content_package(customer_phone, package_price)
                )
                
                # Agenda follow-up
                asyncio.create_task(
                    delivery_system.schedule_followup(customer_phone, package_price)
                )
                
                return {"status": "success", "delivered": True}
            else:
                logger.error(f"‚ùå Dados incompletos: pre√ßo={package_price}, telefone={customer_phone}")
                return {"status": "error", "message": "Incomplete data"}
        
        return {"status": "ignored"}
        
    except Exception as e:
        logger.error(f"üí• Erro webhook Stripe: {e}")
        return {"status": "error"}

# COMANDO MANUAL PARA TESTAR ENTREGA
@app.post("/test-delivery/{phone}/{package}")
async def test_delivery(phone: str, package: float):
    """Endpoint para testar entrega manual (APENAS PARA TESTES)"""
    try:
        logger.info(f"üß™ TESTE: Entrega manual ‚Ç¨{package} para {phone}")
        
        success = await delivery_system.deliver_content_package(phone, package)
        
        return {
            "status": "test_completed",
            "delivered": success,
            "package": f"‚Ç¨{package}",
            "phone": phone[-8:]
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro teste entrega: {e}")
        return {"status": "error", "error": str(e)}

# DASHBOARD COM INFO DE ENTREGAS
@app.get("/deliveries")
async def delivery_dashboard():
    """Dashboard das entregas realizadas"""
    

from telegram_client import send_telegram_message, start_telegram_client, stop_telegram_client
import asyncio




async def telegram_message_handler(message):
    # Aqui voc√™ pode adicionar a l√≥gica para processar as mensagens recebidas
    print(f"Mensagem recebida de {message.sender_id}: {message.text}")
    if message.text:
        # Exemplo de resposta: ecoar a mensagem
        await send_telegram_message(message.chat_id, f"Voc√™ disse: {message.text}")





@app.on_event("startup")
async def startup_event():
    await start_telegram_client()
    asyncio.create_task(listen_for_messages(telegram_message_handler))

@app.on_event("shutdown")
async def shutdown_event():
    await stop_telegram_client()


